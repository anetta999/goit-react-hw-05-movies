{"version":3,"file":"static/js/871.1e321fac.chunk.js","mappings":"oOAQaA,EAAe,SAAC,GAAmB,IALzBC,EAKQC,EAAgB,EAAhBA,UACrBC,EACND,EADMC,YAAaC,EACnBF,EADmBE,MAAOC,EAC1BH,EAD0BG,aAAcC,EACxCJ,EADwCI,SAAUC,EAClDL,EADkDK,OAAQC,EAC1DN,EAD0DM,aAGtDC,EAAsBC,KAAKC,MAAsB,IAAfN,EAAsB,IAE9D,OACE,4BACE,gBACEO,IACET,EAAW,0CAC4BA,GAlB/C,8EAqBMU,MAAO,IACPC,IAAI,YAEN,0BACGV,EADH,KAEGI,GAxBcP,EAwBgBO,EAvBnB,IAAIO,KAAKd,GACRe,eAsBkC,oBAFjD,QAIA,wCAAgBP,EAAhB,QACA,sCACA,uBAAIH,GAAsB,uBAC1B,oCACO,OAANC,QAAM,IAANA,OAAA,EAAAA,EAAQU,QAAS,GAChB,wBACGV,EAAOW,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACjB,OACE,yBACE,uBAAIA,KADGD,EAIZ,OAGH,+CAIP,E,mCCCD,EA5CyB,WAAO,IAAD,IACrBE,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAE3D,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAO3B,EAAP,KAAkB4B,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,GAAKV,EAAL,CACA,IAAMW,EAAgB,mCAAG,8GAEFC,EAAAA,EAAAA,IAAsBZ,GAFpB,OAEfa,EAFe,OAGrBJ,EAAaI,GAHQ,gDAMrBC,QAAQC,IAAI,KAAMC,SANG,yDAAH,qDAUtBL,GAXoB,CAYrB,GAAE,CAACX,KAGF,iCACE,mBAAQiB,KAAK,SAAb,UACE,SAAC,KAAD,CAAMC,GAAId,EAAoBe,QAA9B,wBAEF,SAACxC,EAAD,CAAcE,UAAWA,KACzB,2BACE,mDACA,yBACE,SAAC,KAAD,CAAMqC,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAE,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,+LC7CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAmB,mCAAG,oGACVF,EAAAA,EAAAA,IAAA,sCACUC,EADV,oBADU,cAC3BE,EAD2B,yBAI1BA,EAASZ,MAJiB,2CAAH,qDAOnBD,EAAqB,mCAAG,WAAMZ,GAAN,uFACZsB,EAAAA,EAAAA,IAAA,iBACXI,OAAO1B,GADI,oBACgBuB,EADhB,oBADY,cAC7BE,EAD6B,yBAK5BA,EAASZ,MALmB,2CAAH,sDAQrBc,EAAa,mCAAG,WAAM3B,GAAN,uFACJsB,EAAAA,EAAAA,IAAA,iBACXI,OAAO1B,GADI,4BACwBuB,EADxB,oBADI,cACrBE,EADqB,yBAIpBA,EAASZ,MAJW,2CAAH,sDAObe,EAAgB,mCAAG,WAAM5B,GAAN,uFACPsB,EAAAA,EAAAA,IAAA,iBACXI,OAAO1B,GADI,4BACwBuB,EADxB,oBADO,cACxBE,EADwB,yBAIvBA,EAASZ,MAJc,2CAAH,sDAOhBgB,EAAkB,mCAAG,WAAMC,GAAN,uFACTR,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACqBO,EADrB,uCADS,cAC1BL,EAD0B,yBAIzBA,EAASZ,MAJgB,2CAAH,qD","sources":["components/MovieDetails/MovieDetails.js","pages/MovieDetailsPage.js","services/api.js"],"sourcesContent":["const defaultImg =\n  'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n\nconst getReleaseYear = date => {\n  let releaseDate = new Date(date);\n  return releaseDate.getFullYear();\n};\n\nexport const MovieDetails = ({ movieInfo }) => {\n  const { poster_path, title, vote_average, overview, genres, release_date } =\n    movieInfo;\n\n  const userScorePercentage = Math.round((vote_average * 100) / 10);\n\n  return (\n    <div>\n      <img\n        src={\n          poster_path\n            ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n            : defaultImg\n        }\n        width={250}\n        alt=\"poster\"\n      />\n      <h1>\n        {title} (\n        {release_date ? getReleaseYear(release_date) : 'not published yet'})\n      </h1>\n      <p>User score: {userScorePercentage}%</p>\n      <h2>Overview</h2>\n      <p>{overview ? overview : 'not published yet'}</p>\n      <h3>Genres</h3>\n      {genres?.length > 0 ? (\n        <ul>\n          {genres.map(({ id, name }) => {\n            return (\n              <li key={id}>\n                <p>{name}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>not published yet</p>\n      )}\n    </div>\n  );\n};\n","import { MovieDetails } from 'components/MovieDetails/MovieDetails';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { fetchMovieDetailsById } from 'services/api';\nimport { useState, useEffect, useRef, Suspense } from 'react';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/movies');\n  // console.log(movieId);\n  const [movieInfo, setMovieInfo] = useState({});\n\n  useEffect(() => {\n    if (!movieId) return;\n    const getMovieInfoById = async () => {\n      try {\n        const data = await fetchMovieDetailsById(movieId);\n        setMovieInfo(data);\n        // console.log(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    getMovieInfoById();\n  }, [movieId]);\n\n  return (\n    <>\n      <button type=\"button\">\n        <Link to={backLinkLocationRef.current}>Go back</Link>\n      </button>\n      <MovieDetails movieInfo={movieInfo} />\n      <ul>\n        <p>Additional information</p>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '86824f16905540caf32a2109bda1bd06';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `/trending/movie/day?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMovieDetailsById = async movieId => {\n  const response = await axios.get(\n    `/movie/${Number(movieId)}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const fetchCastById = async movieId => {\n  const response = await axios.get(\n    `/movie/${Number(movieId)}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsById = async movieId => {\n  const response = await axios.get(\n    `/movie/${Number(movieId)}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&include_adult=true&language=en-US`\n  );\n  return response.data;\n};\n"],"names":["MovieDetails","date","movieInfo","poster_path","title","vote_average","overview","genres","release_date","userScorePercentage","Math","round","src","width","alt","Date","getFullYear","length","map","id","name","movieId","useParams","location","useLocation","backLinkLocationRef","useRef","state","from","useState","setMovieInfo","useEffect","getMovieInfoById","fetchMovieDetailsById","data","console","log","message","type","to","current","Suspense","fallback","axios","API_KEY","fetchTrendingMovies","response","Number","fetchCastById","fetchReviewsById","fetchMoviesByQuery","query"],"sourceRoot":""}